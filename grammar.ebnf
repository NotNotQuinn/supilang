SBLFile = { Declaration }+ ;
Declaration = "entry" Ident
            | Alias
            ;
Alias = "alias" Ident [ "prefixed" String ] AliasBody "end" ;
AliasBody = { AliasAction }+ ;
AliasAction = ExecuteAction
            | GetCompiledAction
            ;
ExecuteAction = [ RetrieveAction "->" ] ExecuteActionSimple [ "->" ContinuedAction ] ;
RetrieveAction = ( "get" String ) 
               | ArgLiteral
               ;
ContinuedAction = ( "set" String | ExecuteActionSimple ) [ "->" ExecuteAction ] ;
ExecuteActionSimple = "js" JSExecAction
                    | ( "exec" | "pipe" ) String { "|" String }
                    | "say" [ String ]
                    | CallAliasAction 
                    ;
JSExecAction = JSExecString ;
GetCompiledAction = "get" "compiled" AliasBody "end" [ "->" ContinuedAction ] ;
CallAliasAction = "call" [ User ] Ident ;


# TOKENS

# These are less well defined because they are lexed using regexes, and regexes are dank

Ident = { letter | digit | "-" }+ ;
User = "@" { letter | digit | "-" } ;
ArgLiteral = "${" { digit }+ [ "-" { digit }+ | "+" ] "}" ;
JSExecString = "```" text containing only escaped backtics and any other text "```" ;
text containing only escaped backtics and any other text = { any character except a backtic | "\\" "`" };
String = "\"" stringliteraltext "\"" ;
stringliteraltext = any character but quote is escaped ;
any character but quote is escaped = any character except a quote | "\\" "\"" ;
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

# Actual definition of these tokens
# var aliasLexer = lexer.MustSimple([]lexer.Rule{
# 	// identifiers can "overwrite" keywords, otherwise keywords are priorotized
# 	{`Ident`, `[-a-zA-Z_0-9]{2,30}`, nil},
# 	{`Keyword`, `alias|end|\||exec|pipe|->|prefixed|say`, nil},
# 	{`User`, `@[-a-zA-Z_0-9]*`, nil},
# 	{`ArgLiteral`, `\$\{\d+(-\d+|\+|)\}`, nil},
# 	{`JSExecString`, `(\x60{3})(?:\\.|[^\x60])*(\x60{3})`, nil},
# 	// {`Word`, `[a-zA-Z_][a-zA-Z0-9_]`, nil},
# 	{`String`, `"(?:\\.|[^"])*"`, nil},
# 	{"comment", `#[^\n]*`, nil},
# 	{"whitespace", `\s+`, nil},
# })
